searchState.loadedDescShard("massa_consensus_exports", 0, "Definition and exports of the graph types and errors.\nStructure used to broadcast all the information about the …\nContains links to other modules of the node to be able to …\nInterface that communicates with the graph worker thread\nConsensus manager used to stop the consensus thread\nold blocks are pruned every <code>block_db_prune_interval</code>\nChannel used for Websocket broadcast (if enabled) of new …\nChannel used for Websocket broadcast (if enabled) of new …\nsize of a consensus bootstrap streaming part\nblocks channel capacity\nblocks headers channel capacity\nwhether broadcast is enabled\nfilled blocks channel capacity\nStructure used by consensus to broadcast all the …\nchain id\nchannel size\nReturns a boxed clone of self. Useful to allow cloning …\nChannel used by the consensus to send events to the node …\nThreshold for fitness.\nTESTNET: time when the blockclique is ended.\ntarget number of endorsement per block\nInterface to interact with Execution module\nChannel use by Websocket (if they are enable) to broadcast …\nforce keep at least this number of final periods in RAM …\nforce keep at least this number of final blocks without …\nKeypair to sign genesis blocks.\nGenesis timestamp\nGet the best parents for the next block to be produced\nGet an export of a part of the graph\nGet statuses of a list of blocks\nGet the block id of the block at a specific slot in the …\nGet a part of the graph to send to a node for it to setup …\nGet all the cliques of the graph\nGet the latest block, that is in the blockclique, in the …\nGet the stats of the consensus\nlast start period\nMark a block as invalid in the graph\nMaximum number of blocks allowed in <code>DependencyWaitingBlocks</code>…\nMaximum number of blocks allowed in discarded blocks.\nMaximum number of blocks allowed in <code>FutureIncomingBlocks</code>.\nMax gas per block for the execution configuration\nMaximum operation validity period count\ncycle duration in periods\nInterface to interact with Pool module\nInterface to interact with Protocol module\nRegister a block in the graph\nRegister a block header in the graph\nInterface to interact with PoS module\nstats time span\nStop the consensus thread Note that we do not take self by …\nDelta time between two period\nNumber of threads\nBootstrap compatible version of the block graph\nMap of active blocks, were blocks are in their exported …\nBest parents hashes in each thread.\nFinite cache of discarded blocks, in exported version …\nReturns the argument unchanged.\nGenesis blocks.\nHead of the incompatibility graph.\nCalls <code>U::from(self)</code>.\nLatest final period and block hash in each thread.\nList of maximal cliques of compatible blocks.\nThe block was checked and included in the blockgraph\nvalid and not yet final\nwithout enough fitness to be part of immutable history\nKeep only the block header and list of ops (but not the …\nEnum used in <code>BlockGraph</code>’s state machine\nSomething can be discarded\nThe block was discarded and is kept to avoid reprocessing …\nnot part of the graph\nBlock status in the graph that can be exported.\nThe block version that can be exported. Note that the …\nBlock has enough fitness.\nimmutable\nwith enough fitness to be part of immutable history\nThe block/header has reached consensus but no …\nreceived but not yet graph processed\nBlock is invalid, either structurally, or because of some …\nBlock is incompatible with a final block.\nStatus\nKeep a full storage with operations\nA structure defining whether we keep a full block with …\nThe block references an unknown Block id\nwaiting for a missing dependency\nThe block’s or header’s slot is too much in the future.\nwaiting for its slot\nFor (i, set) in children, set contains the headers’ …\nReturn a clone of the underlying block. This is used when …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets slot for that header or block\nHeader of the corresponding block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nActive or final\nConvert any StorageOrBlock variant into a …\nAddress of the creator of the block\nGiven header/block\nIds of parents blocks\nwhy it was discarded\nUsed to limit and sort the number of blocks/headers …\nUsed to limit and sort the number of blocks/headers …\nJust the slot of that block\nincludes self if it’s only a header\nBootstrap graph\nBasic deserializer for <code>BootstrapableGraph</code>\nBasic serializer for <code>BootstrapableGraph</code>\nExample\nlist of final blocks\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>BootstrapableGraphDeserializer</code>\nCreates a <code>BootstrapableGraphSerializer</code>\nExample\nStructure used to broadcast all the information about the …\nContains links to other modules of the node to be able to …\nChannel used for Websocket broadcast (if enabled) of new …\nChannel used for Websocket broadcast (if enabled) of new …\nStructure used by consensus to broadcast all the …\nChannel used by the consensus to send events to the node …\nInterface to interact with Execution module\nChannel use by Websocket (if they are enable) to broadcast …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInterface to interact with Pool module\nInterface to interact with Protocol module\nInterface to interact with PoS module\nInterface that communicates with the graph worker thread\nConsensus manager used to stop the consensus thread\nReturns a boxed clone of self. Useful to allow cloning …\nGet the best parents for the next block to be produced\nGet an export of a part of the graph\nGet statuses of a list of blocks\nGet the block id of the block at a specific slot in the …\nGet a part of the graph to send to a node for it to setup …\nGet all the cliques of the graph\nGet the latest block, that is in the blockclique, in the …\nGet the stats of the consensus\nMark a block as invalid in the graph\nRegister a block in the graph\nRegister a block header in the graph\nStop the consensus thread Note that we do not take self by …\namount overflow\nConsensus error\nthere was an inconsistency between containers {0}\nexecution error: {0}\nfitness overflow\nCould not create genesis block {0}\nio error {0}\nio error {0}\nInternal error\ninvalid ledger change: {0}\nInvalid transition {0}\nLedger error\nLedger error {0}\nledger inconsistency error {0}\nMassa time error {0}\nmissing block {0}\nmissing operation {0}\nmodels error: {0}\nmodels error: {0}\nProof of stake cycle unavailable {0}\nProtocol error {0}\nserde error\nserde error\nSerialization error: {0}\ntransaction error {0}\ntransaction error {0}\ntry from slice error {0}\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEvents that are emitted by consensus.\nprobable desynchronization detected, need …\nNetwork is ended should be send after <code>end_timestamp</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExportable version of <code>ActiveBlock</code> Fields that can be …\nBasic deserializer of <code>ExportActiveBlock</code>\nBasic serializer of <code>ExportActiveBlock</code>\nThe block.\nExample:\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nconversion from active block to export active block\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nfor example has its fitness reached the given threshold\nCreate a new <code>ExportActiveBlockDeserializer</code>\nCreate a new <code>ExportActiveBlockSerializer</code>\none <code>(block id, period)</code> per thread ( if not genesis )\nconsuming conversion from <code>ExportActiveBlock</code> to <code>ActiveBlock</code>\nold blocks are pruned every <code>block_db_prune_interval</code>\nsize of a consensus bootstrap streaming part\nblocks channel capacity\nblocks headers channel capacity\nwhether broadcast is enabled\nfilled blocks channel capacity\nchain id\nchannel size\nThreshold for fitness.\nTESTNET: time when the blockclique is ended.\ntarget number of endorsement per block\nforce keep at least this number of final periods in RAM …\nforce keep at least this number of final blocks without …\nReturns the argument unchanged.\nKeypair to sign genesis blocks.\nGenesis timestamp\nCalls <code>U::from(self)</code>.\nlast start period\nMaximum number of blocks allowed in <code>DependencyWaitingBlocks</code>…\nMaximum number of blocks allowed in discarded blocks.\nMaximum number of blocks allowed in <code>FutureIncomingBlocks</code>.\nMax gas per block for the execution configuration\nMaximum operation validity period count\ncycle duration in periods\nstats time span\nDelta time between two period\nNumber of threads")