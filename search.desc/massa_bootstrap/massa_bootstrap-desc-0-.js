searchState.loadedDescShard("massa_bootstrap", 0, "Copyright (c) 2022 MASSA LABS info@massa.net Bootstrap …\nAsk for a final state and consensus part\nAsk for bootstrap peers\nIP {0} is blacklisted\nMessages used during bootstrap by client\nDeserializer for <code>BootstrapClientMessage</code>\nSerializer for <code>BootstrapClientMessage</code>\nBootstrap configuration.\nEncapsulates the various failure contexts for the …\nBootstrap error\nBootstrap error\nMessage sent when the final state and consensus bootstrap …\nAbstraction layer over data produced by the listener, and …\nPart of final state and consensus\nBootstrap peers\nMessages used during bootstrap by server\nDeserializer for <code>BootstrapServerMessage</code>\nBootstrap Message der args\nSerializer for <code>BootstrapServerMessage</code>\nBootstrap succeed\nTODO: this should be crate-private. currently needed for …\nSync clocks\nBootstrap with both IPv4 and IPv6 protocols (default).\nclock error: {0}\nInitiates a connection with given timeout in milliseconds\ndeserialization error: {0}\nfinal state error: {0}\ngeneral bootstrap error: {0}\na collection of the bootstrap state snapshots of all …\nBootstrap only with IPv4.\nBootstrap only with IPv6.\nincompatible version: {0}\nfail to init the list from file : {0}\nThe bootstrap process ended prematurely - e.g. too much …\nBootstrap IO error: {0}\nBootstrap IP protocol version setting.\n<code>massa_consensus</code> error: {0}\n<code>massa_hash</code> error: {0}\n<code>massa_signature</code> error {0}\nmissing keypair file\nmodels error: {0}\nProof-of-Stake error: {0}\nprotocol error: {0}\nReceived error: {0}\nserialization error: {0}\nserialize error: {0}\nSlot sent to get state changes is too old\ntime error: {0}\nBootstrap process timeout: {0}\nunexpected message received from client: {0:?}\nconnection with bootstrap node dropped\nunexpected message received from server: {0:?}\nIP {0} is not in the whitelist\nPath to the bootstrap blacklist file. This whitelist …\nIp address of our bootstrap nodes and their public key.\nIP version filter for bootstrap list, targeting …\nTime allocated to managing the bootstrapping process, i.e. …\nPath to the bootstrap whitelist file. This whitelist …\nCache duration\nchain id\nconnection timeout\nconsensus bootstrap part size\nendorsement count\nstate of the final state\nReturns the argument unchanged.\nUses the cond-var pattern to handle sig-int cancellation. …\nstate of the consensus graph\nCalls <code>U::from(self)</code>.\nMax size of the IP list\nKeep ledger or not if not bootstrap\nPort to listen if we choose to allow other nodes to use us …\nmax advertise length\nmax bootstrap blocks length\nmax bootstrap error length\nmax slot count in state changes\nMaximum allowed time between server and client clocks\nmax number of consensus block ids when sending a bootstrap …\nmax credits in proof-of-stake and state changes\nmax datastore entry count\nmax datastore key length\nmax datastore value length\nmax executed denunciations changes\nmax denunciations in block header\nmax executed ops\nmax bootstrap final state new_elements\nmax function name length\nmax ledger changes\nmax listeners per peer\nmax op datastore entry count\nmax op datastore key length\nmax op datastore value length\nmax operations per block\nmax executed ops changes\nmax parameters size\nMax ping delay.\nmax production stats in proof-of-stake and state changes\nmax rolls in proof-of-stake and state changes\nMax simultaneous bootstraps\nmax bootstrap versioning new_elements\nblock count to check / process for versioning stats\nlist of network peers\nMinimum interval between two bootstrap attempts from a …\nperiod per cycle\nrandomness size bytes\nRead-Write limitation for a connection in bytes per seconds\nreadout error timeout\nreadout timeout\nTime we wait before retrying a bootstrap\nstart the bootstrapping system using <code>start_bootstrap_server</code>\nSee module level documentation for details\nthread count\nwhite/black list\nshared white/black list\nwrite error timeout\nwrite timeout\nError message\nLast received consensus block slot\nSlot we are attached to for changes\nLast received state key\nLast received versioning key\nShould be true only for the first part, false later\nOutdated block ids in the current consensus graph bootstrap\nPart of the consensus graph\nError message\nLast Slot before downtime for network restart management\nLast Start Period for network restart management\nServer peers\nThe current time on the bootstrap server.\nSlot the state changes are attached to\nPart of the state in a serialized way\nThe version of the bootstrap server.\nPart of the state (specific to versioning) in a serialized …\nsimilar to std::io::Read::read_exact, but with a timeout …\nInternal helper\nInternal helper\nBootstrap client binder\nThe known-length component of a message to be received.\nWe are using this instead of of our library deserializer …\nReturns the argument unchanged.\nReturns the argument unchanged.\nPerforms a handshake. Should be called after connection …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>WriteBinder</code>.\nReads the next message.\nSend a message to the bootstrap server\nBootstrap server binder\nThe known-length component of a message to be received.\nSpawns a threadblocks on the passed in runtimeuses passed …\nWe are using this instead of of our library deserializer …\nReturns the argument unchanged.\nReturns the argument unchanged.\nPerforms a handshake. Should be called after connection …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>WriteBinder</code>.\nRead a message sent from the client (not signed).\nWrites the next message.\nSpecifies a common interface that can be used by standard, …\nInitiates a connection with given timeout in milliseconds\nGets the state from a bootstrap server (internal private …\nThe client attempts to connect to the given address. If a …\nTries to connect to address\nReturns the argument unchanged.\nUses the cond-var pattern to handle sig-int cancellation. …\nCalls <code>U::from(self)</code>.\nThis function will send the starting point to receive a …\nIP {0} is blacklisted\nEncapsulates the various failure contexts for the …\nclock error: {0}\ndeserialization error: {0}\nfinal state error: {0}\ngeneral bootstrap error: {0}\nincompatible version: {0}\nfail to init the list from file : {0}\nThe bootstrap process ended prematurely - e.g. too much …\nBootstrap IO error: {0}\n<code>massa_consensus</code> error: {0}\n<code>massa_hash</code> error: {0}\n<code>massa_signature</code> error {0}\nmissing keypair file\nmodels error: {0}\nProof-of-Stake error: {0}\nprotocol error: {0}\nReceived error: {0}\nserialization error: {0}\nserialize error: {0}\ntime error: {0}\nBootstrap process timeout: {0}\nunexpected message received from client: {0:?}\nconnection with bootstrap node dropped\nunexpected message received from server: {0:?}\nIP {0} is not in the whitelist\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTODO: this should be crate-private. currently needed for …\nSetup a mio-listener that functions as a <code>select!</code> on a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPoll the listener for new connections\nStop the bootstrap listener.\nAsk for a final state and consensus part\nAsk for bootstrap peers\nMessages used during bootstrap by client\nDeserializer for <code>BootstrapClientMessage</code>\nSerializer for <code>BootstrapClientMessage</code>\nBootstrap error\nBootstrap error\nMessage sent when the final state and consensus bootstrap …\nPart of final state and consensus\nBootstrap peers\nMessages used during bootstrap by server\nDeserializer for <code>BootstrapServerMessage</code>\nSerializer for <code>BootstrapServerMessage</code>\nBootstrap succeed\nSync clocks\nSlot sent to get state changes is too old\nExample\nExample\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>BootstrapServerMessageSerializer</code>\nCreates a new <code>BootstrapServerMessageDeserializer</code>\nCreates a new <code>BootstrapClientMessageSerializer</code>\nCreates a new <code>BootstrapClientMessageDeserializer</code>\nExample\nExample\nError message\nLast received consensus block slot\nSlot we are attached to for changes\nLast received state key\nLast received versioning key\nShould be true only for the first part, false later\nOutdated block ids in the current consensus graph bootstrap\nPart of the consensus graph\nError message\nLast Slot before downtime for network restart management\nLast Start Period for network restart management\nServer peers\nThe current time on the bootstrap server.\nSlot the state changes are attached to\nPart of the state in a serialized way\nThe version of the bootstrap server.\nPart of the state (specific to versioning) in a serialized …\nAbstraction layer over data produced by the listener, and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nChecks latest attempt. If too recent, provides the bad …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ncreate a new bootstrap manager, but no means of stopping …\nTo be called from a <code>thread::spawn</code> invocation\nSee module level documentation for details\nstop the bootstrap server\nshared white/black list\nBootstrap client config\nBootstrap configuration.\nBootstrap Message der args\nBootstrap server binding\nBootstrap with both IPv4 and IPv6 protocols (default).\nBootstrap only with IPv4.\nBootstrap only with IPv6.\nBootstrap IP protocol version setting.\nPath to the bootstrap blacklist file. This whitelist …\nIp address of our bootstrap nodes and their public key.\nIP version filter for bootstrap list, targeting …\nTime allocated to managing the bootstrapping process, i.e. …\nPath to the bootstrap whitelist file. This whitelist …\nCache duration\nchain id\nconnection timeout\nconsensus bootstrap part size\nendorsement count\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMax size of the IP list\nKeep ledger or not if not bootstrap\nPort to listen if we choose to allow other nodes to use us …\nmax advertise length\nmax bootstrap blocks length\nmax bootstrap error length\nmax slot count in state changes\nMaximum allowed time between server and client clocks\nmax number of consensus block ids when sending a bootstrap …\nmax credits in proof-of-stake and state changes\nmax datastore entry count\nmax datastore key length\nmax datastore value length\nmax executed denunciations changes\nmax denunciations in block header\nmax executed ops\nmax bootstrap final state new_elements\nmax function name length\nmax ledger changes\nmax listeners per peer\nmax op datastore entry count\nmax op datastore key length\nmax op datastore value length\nmax operations per block\nmax executed ops changes\nmax parameters size\nMax ping delay.\nmax production stats in proof-of-stake and state changes\nmax rolls in proof-of-stake and state changes\nMax simultaneous bootstraps\nmax bootstrap versioning new_elements\nblock count to check / process for versioning stats\nMinimum interval between two bootstrap attempts from a …\nperiod per cycle\nrandomness size bytes\nRead-Write limitation for a connection in bytes per seconds\nreadout error timeout\nreadout timeout\nTime we wait before retrying a bootstrap\nthread count\nwrite error timeout\nwrite timeout\nConvert a mio stream to std Adapted from Tokio\nA wrapper around the white/black lists that allows …\nAdd IP address to the black list\nAdd IP address to the white list\nReturns the argument unchanged.\nReturns the argument unchanged.\nget the black list\nget the white list\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemove IPs address from the black list\nRemove IPs address from the white list\nChecks if the white/black list is up to date with a …\nwrite list to file")