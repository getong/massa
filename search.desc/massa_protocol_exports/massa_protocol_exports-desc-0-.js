searchState.loadedDescShard("massa_protocol_exports", 0, "Peers that are transmitted during bootstrap\nDeserializer for <code>BootstrapPeers</code>\nSerializer for <code>BootstrapPeers</code>\nAn error occurred during channel communication: {0}\nContainer inconsistency error: {0}\nVersioned factory error: {0}\nProtocol error: {0}\nIO error: {0}\nIncompatible network version: local current is {local} …\nInvalid block: {0}\nThe ip: <code>{0}</code> address is not valid\nInvalid operation error: {0}\nListener error: {0}\nMissing peers\nModels error: {0}\nInvalid announced network version\nError during network connection: <code>{0:?}</code>\nPeer info provided in bootstrap\nPeer disconnected : {0}\nPoS error: {0}\nDynamic protocol configuration mix in static settings and …\nprotocol error\nProtocol manager used to stop the protocol\nSend error: {0}\nSerde error: {0}\nTime error: {0}\nDefine the different transports available TODO: Maybe try …\nThe network controller should not drop a node command …\nThe writer of a node should not drop its event sender …\nWrong signature\nafter <code>ask_block_timeout</code> milliseconds we try to ask a block …\nMaximum number of asked operations in the memory buffer.\nBan a list of Peer Id\nBlock propagation tick interval, useful for propagating …\nChain id\nReturns a boxed clone of self. Useful to allow cloning …\nController channel size\ndebug prints\nDefault category infos\nendorsements per block\nEvent channel size\nReturns the argument unchanged.\nReturns the argument unchanged.\nExtract the transport type from <code>TransportConfig</code>\nGenesis timestamp\nGet a list of peers to be sent to someone that bootstrap …\nGet the stats from the protocol Returns a tuple containing …\ninitial peers path\nSends the order to propagate the header of a block\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nself keypair\nLast start period\nlisteners from where we can receive messages\nTime during which a block is expected to propagate\nMax known blocks we keep during their propagation\nMaximum number of denunciations in a block header\nMaximum number of endorsements that can be propagated in …\nmax time we propagate endorsements\nMax in connections\nmax known blocks of current nodes we keep in memory\nmax known endorsements by our node that we kept in memory\nmax known operations current node kept in memory\nMax message size\nmax known blocks of foreign nodes we keep in memory (by …\nmax known endorsements of foreign nodes we keep in memory …\nmax known operations of foreign nodes we keep in memory …\nmax wanted blocks per node kept in memory\nMaximum time we keep an operation in the storage\nMaximum of operations sent in one block.\nMaximum of operations sent in one message.\nmax time we propagate operations\nmax number of operations kept in memory for propagation\nMax wait time for sending a Network or Node event.\nMaximum size in bytes of all serialized operations size in …\nwe ask for the same block …\nMaximum size of a parameter of a call in ops\nMax size of the channel for command to the connectivity …\nMax size of channel to send commands to the peer testers\nMax size of channel to send commands to thread of peers\nMax size of channel to send commands to propagation thread …\nMax size of channel to send commands to propagation thread …\nMax size of channel to send commands to propagation thread …\nMax size of channel to send commands to retrieval thread …\nMax size of channel to send commands to retrieval thread …\nMax size of channel to send commands to retrieval thread …\nMax size of channel that transfer message from network to …\nMax size of channel that transfer message from network to …\nMax size of channel that transfer message from network to …\nMax size of channel that transfer message from network to …\nMaximum size of a function name\nMaximum number of listeners per peer\nMaximum number of peers per announcement\nMaximum size of an value user datastore\nTimeout message\nNotify to protocol an attack attempt.\nMaximum number of operations in the announcement buffer. …\nInterval at which operations are announced in batches.\nMaximum number of batches in the memory buffer. Dismiss …\nStart processing batches in the buffer each …\nPeers categories infos\nPropagate a batch of endorsement (from pool).\nPropagate a batch of operation (from pool). note: Full …\nRate limit to apply on the data stream\nNumber of bytes per second that can be read/write in a …\nOptional routable ip\nUpdate the block wish list\nPerform all operations needed to stop the …\nStop the protocol Note that we do not take self by value …\nt0\nCooldown before testing again an old peer\nTimeout for the tester operations\nrunning threads count\nnumber of thread tester\nTimeout connection\ntry connection timer\ntry connection timer same peer\nperiodically unban every peer\nUnban a list of Peer Id\nVersion\nreceived announced network version\nlocal current version\nlocal current version\nreceived current network version from incoming header\nPeers that are transmitted during bootstrap\nDeserializer for <code>BootstrapPeers</code>\nSerializer for <code>BootstrapPeers</code>\nPeer info provided in bootstrap\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>BootstrapPeersSerializer</code>\nCreates a new <code>BootstrapPeersDeserializer</code>\nProtocol manager used to stop the protocol\nBan a list of Peer Id\nReturns a boxed clone of self. Useful to allow cloning …\nGet a list of peers to be sent to someone that bootstrap …\nGet the stats from the protocol Returns a tuple containing …\nSends the order to propagate the header of a block\nNotify to protocol an attack attempt.\nPropagate a batch of endorsement (from pool).\nPropagate a batch of operation (from pool). note: Full …\nUpdate the block wish list\nPerform all operations needed to stop the …\nStop the protocol Note that we do not take self by value …\nUnban a list of Peer Id\nAn error occurred during channel communication: {0}\nContainer inconsistency error: {0}\nVersioned factory error: {0}\nProtocol error: {0}\nIO error: {0}\nIncompatible network version: local current is {local} …\nInvalid block: {0}\nThe ip: <code>{0}</code> address is not valid\nInvalid operation error: {0}\nListener error: {0}\nMissing peers\nModels error: {0}\nInvalid announced network version\nError during network connection: <code>{0:?}</code>\nPeer disconnected : {0}\nPoS error: {0}\nprotocol error\nSend error: {0}\nSerde error: {0}\nTime error: {0}\nThe network controller should not drop a node command …\nThe writer of a node should not drop its event sender …\nWrong signature\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreceived announced network version\nlocal current version\nlocal current version\nreceived current network version from incoming header\n<code>::serde::Deserialize</code> trait for <code>PeerId</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>::serde::Serialize</code> trait for <code>PeerId</code>\nDynamic protocol configuration mix in static settings and …\nafter <code>ask_block_timeout</code> milliseconds we try to ask a block …\nMaximum number of asked operations in the memory buffer.\nBlock propagation tick interval, useful for propagating …\nChain id\nController channel size\ndebug prints\nDefault category infos\nendorsements per block\nEvent channel size\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenesis timestamp\ninitial peers path\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nself keypair\nLast start period\nlisteners from where we can receive messages\nTime during which a block is expected to propagate\nMax known blocks we keep during their propagation\nMaximum number of denunciations in a block header\nMaximum number of endorsements that can be propagated in …\nmax time we propagate endorsements\nMax in connections\nmax known blocks of current nodes we keep in memory\nmax known endorsements by our node that we kept in memory\nmax known operations current node kept in memory\nMax message size\nmax known blocks of foreign nodes we keep in memory (by …\nmax known endorsements of foreign nodes we keep in memory …\nmax known operations of foreign nodes we keep in memory …\nmax wanted blocks per node kept in memory\nMaximum time we keep an operation in the storage\nMaximum of operations sent in one block.\nMaximum of operations sent in one message.\nmax time we propagate operations\nmax number of operations kept in memory for propagation\nMax wait time for sending a Network or Node event.\nMaximum size in bytes of all serialized operations size in …\nwe ask for the same block …\nMaximum size of a parameter of a call in ops\nMax size of the channel for command to the connectivity …\nMax size of channel to send commands to the peer testers\nMax size of channel to send commands to thread of peers\nMax size of channel to send commands to propagation thread …\nMax size of channel to send commands to propagation thread …\nMax size of channel to send commands to propagation thread …\nMax size of channel to send commands to retrieval thread …\nMax size of channel to send commands to retrieval thread …\nMax size of channel to send commands to retrieval thread …\nMax size of channel that transfer message from network to …\nMax size of channel that transfer message from network to …\nMax size of channel that transfer message from network to …\nMax size of channel that transfer message from network to …\nMaximum size of a function name\nMaximum number of listeners per peer\nMaximum number of peers per announcement\nMaximum size of an value user datastore\nTimeout message\nMaximum number of operations in the announcement buffer. …\nInterval at which operations are announced in batches.\nMaximum number of batches in the memory buffer. Dismiss …\nStart processing batches in the buffer each …\nPeers categories infos\nRate limit to apply on the data stream\nNumber of bytes per second that can be read/write in a …\nOptional routable ip\nt0\nCooldown before testing again an old peer\nTimeout for the tester operations\nrunning threads count\nnumber of thread tester\nTimeout connection\ntry connection timer\ntry connection timer same peer\nperiodically unban every peer\nVersion")