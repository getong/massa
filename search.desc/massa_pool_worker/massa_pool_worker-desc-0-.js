searchState.loadedDescShard("massa_pool_worker", 0, "Copyright (c) 2022 MASSA LABS info@massa.net Pool of …\nPool controller implementation\nCopyright (c) 2023 MASSA LABS info@massa.net\nCopyright (c) 2022 MASSA LABS info@massa.net\nCopyright (c) 2022 MASSA LABS info@massa.net\nStart pool manager and controller\nCopyright (c) 2022 MASSA LABS info@massa.net Write worker …\nAdd denunciation precursor to the pool\nAdd items to the pool\nA generic command to send commands to a pool\nNotify of new final consensus periods\nPool controller\nImplementation of the pool manager.\nStop the worker\nConfig\nAdd denunciation precursor to pool\nAsynchronously add endorsements to pool. Simply print a …\nAsynchronously add operations to pool. Simply print a …\nReturns a boxed clone of self. Allows cloning …\nCheck if the pool contains a list of endorsements. Returns …\nCheck if the pool contains a list of operations. Returns …\nShared reference to the denunciation pool\nDenunciations input data mpsc (used to stop the pool …\nDenunciation write worker command sender\nHandle used to join the denunciation thread\nShared reference to the endorsement pool\nEndorsements input data mpsc (used to stop the pool thread)\nEndorsement write worker command sender\nHandle used to join the endorsement thread\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nget denunciationsq for a block\nget endorsements for a block\nget operations for block creation\nGet the number of denunciations in the pool\nGet the number of endorsements in the pool\nGet final consensus periods\nGet the number of operations in the pool\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast final periods from Consensus\nAsynchronously notify of new final consensus periods. …\nShared reference to the operation pool\nOperations input data mpsc (used to stop the pool thread)\nOperation write worker command sender\nHandle used to join the operation thread\nStops the worker\nOnly 1 DenunciationPrecursor received for this key\n2 DenunciationPrecursor received, a Denunciation was then …\nA Value (as in Key/Value) for denunciation pool internal …\nAdd a denunciation precursor to the pool - can lead to a …\nAdd endorsements, turn them in DenunciationPrecursor then …\npool channels\nInternal function to cleanup the denunciation cache\ncleanup internal cache, removing too old denunciation\npool configuration\nInternal cache for denunciations\nReturns the argument unchanged.\nReturns the argument unchanged.\nget denunciations for block creation\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nlast consensus final periods, per thread\nGet the number of stored elements\nNotify of final periods\nAdd a list of endorsements to the pool\nchannels used by the pool worker\nconfiguration\nChecks whether an element is stored in the pool.\nendorsements indexed by slot, index and block ID\nendorsements sorted by increasing inclusion slot for …\nReturns the argument unchanged.\nget endorsements for block creation\nCalls <code>U::from(self)</code>.\nlast consensus final periods, per thread\nGet the number of stored elements\nnotify of new final CS periods\nstorage\nstaking wallet, to know which addresses we are using to …\nAdd a list of operations to the end of the pool. They will …\nchannels used by the pool worker\nconfiguration\nChecks whether an element is stored in the pool.\nEliminate all operations that would cause a sender balance …\nReturns the argument unchanged.\nget operations for block creation\nReturns the list of executed ops with a boolean indicating …\nGet the relevant PoS draws of our staking addresses\nGet the candidate balances of the addresses sending the …\nCalls <code>U::from(self)</code>.\nlast consensus final periods, per thread\nGet the number of stored elements\nnotify of new final slot\nFilter out ops that are not of interest.\nRefresh the pool. Note that this function is very heavy …\nScore the operations\noperations map\nstorage instance\nTruncates the container to the max allowed size\nstaking wallet, to know which addresses we are using to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe maximum amount of gas that can be used by an operation.\nmax amount that the op might spend from the sender’s …\nDenunciation pool writer thread.\nEndorsement pool write thread instance\nOperation pool writer thread.\nShared reference to the denunciation pool\nShared reference to the pool\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShared reference to the operation pool\nCommand reception channel\nCommand reception channel\nCommand reception channel\nRuns the thread\nRun the thread.\nRun the thread.\nSpawns a pool writer thread, returning a join handle.\nSpawns a pool writer thread, returning a join handle.\nSpawns a pool writer thread, returning a join handle.\nStart pool manager and controller")