searchState.loadedDescShard("massa_versioning", 0, "General description\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nState machine for a Versioning component that tracks the …\nA message to update the <code>ComponentState</code>\nState machine for a Versioning component that tracks the …\nState machine for a Versioning component that tracks the …\nError returned by ’extend_from_db`\nState machine for a Versioning component that tracks the …\nError returned by <code>MipState::is_consistent_with</code>\nError returned by ’is_consistent_with_shutdown_period`\nState machine for a Versioning component that tracks the …\nVersioning component enum\nMIP info (name &amp; versions &amp; time range for a MIP)\nWrapper of ComponentState (in order to keep state history)\nStatistics in MipStoreRaw\nDatabase for all MIP info\nStore of all versioning info\nIn order for a MIP to be accepted, we compute statistics …\nState machine for a Versioning component that tracks the …\nError returned by MipStateHistory::state_at\nError returned by <code>MipStoreRaw::update_with</code>\nReturn the time when state will go from LockedIn to …\nOnce deployment has been locked, wait for this duration …\nfrom MipInfo.activation_delay\nUsed internally by <code>update_network_version_stats</code>\nComponents concerned by this versioning (e.g. a new Block …\nExtend MIP store with what is written on the disk\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all versions in ‘Active state’ for the given …\nGet all versions in ‘Active state’ for the given …\nGet all versions (at any state) for the given MipComponent\nGet all versions (at any state) for the given MipComponent\nGet latest version at given timestamp (e.g. slot) for the …\nGet latest version at given timestamp (e.g. slot)\nRetrieve a list of MIP info with their corresponding state …\nRetrieve the last active version at the given timestamp\nRetrieve the current network version to set in block header\nRetrieve the network version number to announce in block …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven a corresponding MipInfo, check if state is consistent\nCheck if store is consistent with given last network …\nReturn True if state can not change anymore (e.g. Active, …\nMIP name or descriptive name\nCreate\nCurrent time (timestamp)\nCurrent time (timestamp)\nUpdate state from state Defined\nUpdate state from state Started\nUpdate state from state LockedIn …\nUpdate state (will always stay in state Active)\nUpdate state (will always stay in state Failed)\nAdvance the state Can be called as multiple times as it …\nCreate a new state from an existing state - resulting …\na timestamp at which the version gains its meaning (e.g. …\nfrom MipInfo.start\nQuery state at given timestamp TODO: add doc for start &amp; …\n% of past blocks with this version\n% of past blocks with this version\na timestamp at the which the deployment is considered …\nfrom MipInfo.timeout\nCreate a MIP store with what is written on the disk\nCreate a MIP store raw with what is written on the disk\nGet MIP store changes between 2 timestamps - used by the …\nUpdate our store with another (usually after a bootstrap …\nNetwork (or global) version (to be included in block …\nArguments struct in order to create Self::Output\nCreate an object given a timestamp (e.g slot)\nError if object cannot be created (+ used for …\nuse get_latest_version (see Factory trait) Require to …\nFactory error\nStrategy to use when creating a new object from a factory\nFactory will create only one object of a given type, so a …\nTrait for Factory that create objects based on versioning …\nCreate an object of type Self::Output\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all versions in ‘Active state’ for the associated …\nGet all versions (at any state) for the associated …\nReturn the MipComponent associated with return type …\nGet the version the current component with the given …\nGet latest version at given timestamp (e.g. slot)\nAccess to the MipStore\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA Deserializer for <code>AdvanceLW</code>\nSerializer for <code>AdvanceLW</code>\nA Deserializer for ComponentState`\nSerializer for <code>ComponentState</code>\nSer / Der\nDeserializer for <code>MipInfo</code>\nSerializer for <code>MipInfo</code>\nA Deserializer for <code>MipState</code>\nSerializer for <code>MipState</code>\nA Deserializer for `VersioningStoreRaw\nSerializer for <code>VersioningStoreRaw</code>\nA Deserializer for `MipStoreStats\nSerializer for <code>VersioningStoreRaw</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Serializer</code>\nCreates a new <code>MipInfoDeserializer</code>\nCreates a new <code>Serializer</code>\nCreates a new ``\nCreates a new <code>Serializer</code>\nCreates a new <code>AdvanceLWDeserializer</code>\nCreates a new <code>MipStateSerializer</code>\nCreates a new <code>MipStateDeserializer</code>\nCreates a new <code>Serializer</code>\nCreates a new ``\nCreates a new <code>Serializer</code>\nCreates a new ``")